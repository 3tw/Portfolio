/* Container */

// Main padding

@mixin container-padding {
  @each $breakpoint, $py, $px in $container-paddings {
    @include breakpoint-up($breakpoint) {
      padding: $py $px;
    }
  }
}

// Fill edge 2 edge on screens smaller than SM

@mixin container-padding-sm-fill {
  @each $breakpoint, $py, $px in $container-paddings {
    @if $breakpoint == xxs {
      @include breakpoint-up($breakpoint) {
        padding: $py 0;
      }
    } @else if $breakpoint == xs {
      @include breakpoint-up($breakpoint) {
        padding: $py 0;
      }
    } @else {
      @include breakpoint-up($breakpoint) {
        padding: $py $px;
      }
    }
  }
}

/* Breakpoints */

@mixin breakpoint-up($point) {
  @if $point == xxs {
    @content;
  } @else if $point == xs {
    @media only screen and (min-width: map-get($breakpoints, "xs")) {
      @content;
    }
  } @else if $point == sm {
    @media only screen and (min-width: map-get($breakpoints, "sm")) {
      @content;
    }
  } @else if $point == md {
    @media only screen and (min-width: map-get($breakpoints, "md")) {
      @content;
    }
  } @else if $point == lg {
    @media only screen and (min-width: map-get($breakpoints, "lg")) {
      @content;
    }
  } @else if $point == xl {
    @media only screen and (min-width: map-get($breakpoints, "xl")) {
      @content;
    }
  }
}

@mixin breakpoint-down($point) {
  @if $point == xxs {
    @media only screen and (max-width: map-get($breakpoints, "xs")) {
      @content;
    }
  } @else if $point == xs {
    @media only screen and (max-width: map-get($breakpoints, "sm")) {
      @content;
    }
  } @else if $point == sm {
    @media only screen and (max-width: map-get($breakpoints, "md")) {
      @content;
    }
  } @else if $point == md {
    @media only screen and (max-width: map-get($breakpoints, "lg")) {
      @content;
    }
  } @else if $point == lg {
    @media only screen and (max-width: map-get($breakpoints, "xl")) {
      @content;
    }
  } @else if $point == xl {
    @content;
  }
}

/* Center with margin */

@mixin center-margin {
  margin-left: auto;
  margin-right: auto;
}

@mixin center-absolute {
  top: 50%;
  left: 50%;
  transform: translate(-50%, -50%);
}